from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class SeekerPostCoordinatesPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lat=None, lon=None):  # noqa: E501
        """SeekerPostCoordinatesPostRequest - a model defined in OpenAPI

        :param lat: The lat of this SeekerPostCoordinatesPostRequest.  # noqa: E501
        :type lat: float
        :param lon: The lon of this SeekerPostCoordinatesPostRequest.  # noqa: E501
        :type lon: float
        """
        self.openapi_types = {
            'lat': float,
            'lon': float
        }

        self.attribute_map = {
            'lat': 'lat',
            'lon': 'lon'
        }

        self._lat = lat
        self._lon = lon

    @classmethod
    def from_dict(cls, dikt) -> 'SeekerPostCoordinatesPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _seeker_post_coordinates__post_request of this SeekerPostCoordinatesPostRequest.  # noqa: E501
        :rtype: SeekerPostCoordinatesPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lat(self) -> float:
        """Gets the lat of this SeekerPostCoordinatesPostRequest.


        :return: The lat of this SeekerPostCoordinatesPostRequest.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat: float):
        """Sets the lat of this SeekerPostCoordinatesPostRequest.


        :param lat: The lat of this SeekerPostCoordinatesPostRequest.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

        self._lat = lat

    @property
    def lon(self) -> float:
        """Gets the lon of this SeekerPostCoordinatesPostRequest.


        :return: The lon of this SeekerPostCoordinatesPostRequest.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon: float):
        """Sets the lon of this SeekerPostCoordinatesPostRequest.


        :param lon: The lon of this SeekerPostCoordinatesPostRequest.
        :type lon: float
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")  # noqa: E501

        self._lon = lon
